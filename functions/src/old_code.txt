/* async function checkUsername(username: string, password: string): Promise<[boolean, string]> {
  const users = db.collection('users').doc(username);
  const doc = await users.get();
  if (!doc.exists) {
    console.log('work');
    let firebaseToken = await admin.auth().createCustomToken(username);
    let newUser = db.collection('users')
    await newUser.doc(username).set({
      Password: password,
      IdToken: firebaseToken
    });
    return [true, firebaseToken]
  } else {
    return [false, 'Failed']
  }
}*/

async function checkUsername(username: string, password: string): Promise<boolean> {
  const users = db.collection("users").doc(username);
  const doc = await users.get();
  console.log('work');
  if (!doc.exists) {
    // const firebaseToken = await admin.getAuth().createCustomToken(username);
    const newUser = db.collection("users");
    await newUser.doc(username).set({
      Password: password,
    });
    return true;
  } else {
    return false;
  }
}

  /*const valid = await checkUsername(username, password);
      if (!valid) {
        return handleResponse(username, 401, "Invalid username/password");
      }
      console.log('at least');
      const firebaseToken = await admin.auth().createCustomToken(username);
      
      return handleResponse(username, 200, {IDtoken: firebaseToken});*/

//const functions = require("firebase-functions");
//const admin = require("firebase-admin");
const initializeApp = require("firebase/app");
const getStorage = require("firebase/storage");
const ref = require("firebase/storage");
const uploadBytesResumable = require("firebase/storage");
const getDownURL = require("firebase/storage");
const multer = require("multer");

const config = require("./firebase.config");

//const firebase = admin.initializeApp();
//const bucket = admin.storage().bucket();

const router = express.Router();
initializeApp(config.firebaseConfig);
//const upload = async

const storage = getStorage();

const upload = multer({ storage: multer.memoryStorage() });

router.pose("/", upload.single("filename"), async (req: any, res: any) => {
  try {

    const storageRef = ref(storage, `files/${req.file.originalname}`);

    const metadata = {
      contentType: req.file.mimetype,
    }

    const snapshot = await uploadBytesResumable(storageRef, req.file.buffer, metadata);

    const downloadURL = await getDownURL(snapshot.ref);

    console.log('File successfully uploaded.');
    return res.send({
      message: 'file uploaded to firebase storage',
      name: req.file.originalname,
      type: req.file.mimetype,
      downloadURL: downloadURL
    });
  } catch (error: any) {
    return res.status(400).send(error.message)
  }
});



<>
const functions = require("firebase-functions");
const formidable = require("formidable-serverless");
//const admin = require("firebase-admin");
//const UUID = require("uuid-v4");

//admin.initializeApp();

exports.uploadFile = functions.https.onRequest((req: any, res: any) => {
  var form = new formidable.IncomingForm();
  return new Promise((resolve, reject) => {
    form.parse(req, async (err: any, fileds: any, files: any) => {
      var file = files.file;
      if (!file) {
        reject(new Error("no file to upload, please choose a file."));
        return;
      }
      var filePath = file.path;
      console.log("File path: " + filePath);

      //let uuid = UUID();
      
      const response = await admin.storage.bucket("gs://rest-api-b6587.appspot.com").upload(filePath, {
        contentType: file.type,
        /*metadata: {
          metadata: {
            firebaseStorageDownloadTokens: uuid,
          },
        },*/
      });

      /*const fullMediaLink = response[0].metadata.mediaLink + "";
      const mediaLinkPath = fullMediaLink.substring(
        0,
        fullMediaLink.lastIndexOf("/") + 1
      );
      const downloadUrl =
        mediaLinkPath +
        encodeURIComponent(response[0].name) +
        "?alt=media&token=" +
        uuid;

      console.log("downloadUrl", downloadUrl);

      resolve({ fileInfo: response[0].metadata, downloadUrl }); // Whole thing completed successfully.*/
      resolve({ fileInfo: response[0].metadata});
    });
  })
    .then((response) => {
      res.status(200).json({ response });
      return null;
    })
    .catch((err) => {
      console.error("Error while parsing form: " + err);
      res.status(500).json({ error: err });
    });
});


//exports.helloWorld = functions.https.onRequest((req: any, res: any) => {
  //functions.logger.info("Hello logs!", {structuredData: true});
  //res.send("Hello from firebase!");
//});

exports.uploadFile = functions.https.onRequest((req: any, res: any) => {
  var form = new formidable.IncomingForm();
  return new Promise((resolve, reject) => {
    form.parse(req, async (err: any, fileds: any, files: any) => {
      var file = files.file;
      if (!file) {
        reject(new Error("no file to upload, please choose a file."));
        return;
      }
      var filePath = file.path;
      console.log("File path: " + filePath);

      //let uuid = UUID();
      
      const response = await admin.storage.bucket("gs://rest-api-b6587.appspot.com").upload(filePath, {
        contentType: file.type,
        /*metadata: {
          metadata: {
            firebaseStorageDownloadTokens: uuid,
          },
        },*/
      });

      /*const fullMediaLink = response[0].metadata.mediaLink + "";
      const mediaLinkPath = fullMediaLink.substring(
        0,
        fullMediaLink.lastIndexOf("/") + 1
      );
      const downloadUrl =
        mediaLinkPath +
        encodeURIComponent(response[0].name) +
        "?alt=media&token=" +
        uuid;

      console.log("downloadUrl", downloadUrl);

      resolve({ fileInfo: response[0].metadata, downloadUrl }); // Whole thing completed successfully.*/
      resolve({ fileInfo: response[0].metadata});
    });
  })
    .then((response) => {
      res.status(200).json({ response });
      return null;
    })
    .catch((err) => {
      console.error("Error while parsing form: " + err);
      res.status(500).json({ error: err });
    });
});


//exports.helloWorld = functions.https.onRequest((req: any, res: any) => {
  //functions.logger.info("Hello logs!", {structuredData: true});
  //res.send("Hello from firebase!");
//});


admin.initializeApp();

app.post("/creatUser", async (req: any, res: any) => {
  const form = new formidable.IncomingForm({ multiples: true });

  try {
    form.parse(req, async (err: any, fields: any, files: any) => {
      let uuid = UUID();
      var downLoadPath =
        "https://firebasestorage.googleapis.com/v0/b/rest-api-b6587.appspot.com/o/";

      const profileImage = files.profileImage;

      // url of the uploaded image
      let imageUrl;

      //const docID = userRef.doc().id;

      if (err) {
        return res.status(400).json({
          message: "There was an error parsing the files",
          data: {},
          error: err,
        });
      }
      const bucket = storage.bucket("gs://rest-api-b6587.appspot.com");

      if (profileImage.size == 0) {
        // do nothing
      } else {
        const imageResponse = await bucket.upload(profileImage.path, {
          destination: `users/${profileImage.name}`,
          resumable: true,
          metadata: {
            metadata: {
              firebaseStorageDownloadTokens: uuid,
            },
          },
        });
        // profile image url
        imageUrl =
          downLoadPath +
          encodeURIComponent(imageResponse[0].name) +
          "?alt=media&token=" +
          uuid;
      }
      // object to send to database
      /*const userModel = {
        id: docID,
        name: fields.name,
        email: fields.email,
        age: fields.age,
        profileImage: profileImage.size == 0 ? "" : imageUrl,
      };

      await userRef
        .doc(docID)
        .set(userModel, { merge: true })
        .then((value) => {
          // return response to users
          res.status(200).send({
            message: "user created successfully",
            data: userModel,
            error: {},
          });
        });*/
        console.log("imageurl", imageUrl);
        res.status(200).send("working");
    });
  } catch (err) {
    res.send({
      message: "Something went wrong",
      data: {},
      error: err,
    });
  }
});

exports.api = functions.https.onRequest(app);


const app = express();

const firebaseConfig = {
  apiKey: "AIzaSyBv0YpZub_rr-nQ_fil5DhUjQGpPV9e6jQ",
  authDomain: "rest-api-b6587.firebaseapp.com",
  projectId: "rest-api-b6587",
  storageBucket: "rest-api-b6587.appspot.com",
  messagingSenderId: "276179708375",
  appId: "1:276179708375:web:d18b52c6e02dcc03f84392",
  measurementId: "G-13Y9JC2Y1S"
};

firebase.initializeApp(firebaseConfig);

const auth = require("./auth");
//const uploadFile = require("./upload");
//const upload = require("./upload");

// auth function
exports.auth = auth.auth;
//exports.uploadFile = uploadFile.app;
//exports.upload = auth.uploadFile;
//const express = require("express");

const storage = getStorage();

const upload = multer({ storage: multer.memoryStorage() });

app.get("/", (req: any, res: any) => {
  res.json("Firebase Storage");
});

app.post("/", upload.single("filename"), (req: any, res: any) => {
  const storageRef = ref(storage, `files/${req.file.originalname}`);

  uploadBytes(storageRef, req.file.buffer).then(() => {
    console.log("file uplaoded");
  });
  console.log(req.file);
});

exports.upload = functions.https.onRequest(app)

---------------------------------------------------------------
const firebaseApp = require("./firebase");

const storage = getStorage(firebaseApp);

const packageRef = ref(storage, "packages/test.png");

export const fileUpload = (image: any) => {
  const metadata = {
    conteneType: "image/png",
  };

  uploadBytes(packageRef, image, metadata)
    .then((snapshot) => {
      alert("File uploaded successfully");
    })
    .catch((err: any) => {
      console.log(err);
    });


}

----------------------------------------------------------------
(not working due to multer)


import express, { Router } from "express";
import { initializeApp } from "firebase/app";
import { getStorage, ref, getDownloadURL, uploadBytesResumable } from "firebase/storage";
const multer = require("multer");
import config from "./firebase";

const router: Router= express.Router();

initializeApp(config.firebaseConfig);

const storage = getStorage();

const upload = multer({ storage: multer.memoryStorage() });
console.log("work");

router.post("/", upload.single("filename"), async (req: any, res: any) => {
  try {
    console.log(req.file.originalname);
    const storageRef = ref(storage, `files/${req.file.originalname}`);

    const metadata = {
      contentType: req.file.mimetype,
    };

    const snapshot = await uploadBytesResumable(storageRef, req.file.buffer, metadata);

    const downloadUrl = await getDownloadURL(snapshot.ref);

    console.log('File successfuly uploaded.');
    return res.send({
      message: 'file uploaded to firebase storage',
      name: req.file.originalname,
      type: req.file.mimetype,
      downloadUrl: downloadUrl
    })
  } catch (error: any) {
    return res.status(400).send(error.message)
  }
});

module.exports = router;




------------------------------------------------------------------------------------------
//const functions = require("firebase-admin");
const functions = require("firebase-functions");
const cors = require("cors")({origin: true});
const admin = require("firebase-admin");
var fs = require('fs');
/**
 * Upload the file in firestore storage
 * @param {String} filePath 
 * @param {String} fileName 
 */

//async function uploadLocalFileToStorage(filePath: string, fileName: string) {
exports.upload= functions.https.onRequest((req: any, res: any) => {
  const handleError = (filepath: string, error: any) => {
    functions.logger.error({User: filepath}, error);
    res.sendStatus(500);
    return;
  };

  const handleResponse = (filename: string, status: number, body: any) => {
    functions.logger.log(
      {User: filename},
      {
        Response: {
          Status: status,
          Body: body,
        },
      }
    );
    if (body) {
      return res.status(200).json(body);
    }
    return res.sendStatus(status);
  };

  const imageBucket = "images/";
  
  const bucket = admin.storage().bucket();
  const destination = `${imageBucket}${req.body.fileName}`;

  console.log(req.body.fileName);
  console.log(req.body.filePath);
  var stats = fs.statSync(req.body.filePath);
  console.log('is directory ? ' + stats.isFile());

  try {
    return cors(req, res, async () => {
      // Uploads a local file to the bucket
      await bucket.upload(req.body.filePath, {
          destination: destination,
          gzip: true,
          metadata: {
              cacheControl: 'public, max-age=31536000',
          },
      });

      console.log(`${req.body.fileName} uploaded to /${imageBucket}/${req.body.fileName}.`);
      return handleResponse(req.body.fileName, 200, `${req.body.fileName} uploaded to /${imageBucket}/${req.body.fileName}.`);
    });
  } catch (e) {
      return handleError(req.body.filePath, e);
  }
});

------------------------------------------------------------------------------------------

//const functions = require("firebase-admin");
const functions = require("firebase-functions");
const cors = require("cors")({origin: true});
const admin = require("firebase-admin");
const formidable = require("formidable-serverless");
var fs = require('fs');
/**
 * Upload the file in firestore storage
 * @param {String} filePath 
 * @param {String} fileName 
 */

//async function uploadLocalFileToStorage(filePath: string, fileName: string) {
exports.upload= functions.https.onRequest((req: any, res: any) => {
  const handleError = (filepath: string, error: any) => {
    functions.logger.error({User: filepath}, error);
    res.sendStatus(500);
    return;
  };

  const handleResponse = (filename: string, status: number, body: any) => {
    functions.logger.log(
      {User: filename},
      {
        Response: {
          Status: status,
          Body: body,
        },
      }
    );
    if (body) {
      return res.status(200).json(body);
    }
    return res.sendStatus(status);
  };

  /*var form = new formidable.IncomingForm();
  form.parse(req. async (err, fields, files) => {
    var file = files.fileToUpload;
    if (err || !file) {
      res.status(500).send(err);
      return;
    }
  })*/

  const imageBucket = "images/";
  
  const bucket = admin.storage().bucket();
  const destination = `${imageBucket}${req.body.fileName}`;

  console.log(req.body.fileName);
  console.log(req.body.filePath);
  var stats = fs.statSync(req.body.filePath);
  console.log('is directory ? ' + stats.isFile());

  try {
    return cors(req, res, async () => {
      // Uploads a local file to the bucket
      await bucket.upload(req.body.filePath, {
          destination: destination,
          gzip: true,
          metadata: {
              cacheControl: 'public, max-age=31536000',
          },
      });

      console.log(`${req.body.fileName} uploaded to /${imageBucket}/${req.body.fileName}.`);
      return handleResponse(req.body.fileName, 200, `${req.body.fileName} uploaded to /${imageBucket}/${req.body.fileName}.`);
    });
  } catch (e) {
      return handleError(req.body.filePath, e);
  }
});

---------------------------------------------------------------------------
const functions = require("firebase-functions");
const formidable = require("formidable-serverless");
const admin = require("firebase-admin");
//admin.initializeApp();

exports.uploadFile = functions.https.onRequest((req: any, res: any) => {
  var form = new formidable.IncomingForm();
  form.parse(req, async (err: any, fields: any, files: any) => {
    var file = files.fileToUpload;
    if (err || !file) {
      res.status(500).send(err);
      return;
    }
    var filePath = file.path;
    var filename = file.name;
    console.log(filePath, filename);
    var bucket = admin.storage().bucket("rest-api-b6587.appspot.com");
    console.log(" work ")
    const options = {
      destination: "package/" + filename
      //contentType: "image/jpeg", //file.path
    };

    //upload image
    await bucket
      .upload(filePath, options)
      .catch((error: any) => res.status(500).send(error));
    await res.status(200).send("success");
  });
});


------------------------------------------------------------
const functions = require("firebase-functions");
const formidable = require("formidable-serverless");
const admin = require("firebase-admin");
//admin.initializeApp();

exports.uploadFile = functions.https.onRequest(async (req: any, res: any) => {
  try {
    const { data, metadata } = JSON.parse(JSON.stringify(req.body));

    const file = data.Content;
    console.log(metadata.Name);
    console.log(file)
    const bucket = admin.storage().bucket("rest-api-b6587.appspot.com");
    const options = {
      destination: "package/" + metadata.Name
    };

    await bucket.upload(file, options);

    res.status(200).send(metadata);
  } catch (error) {
    console.error(error);
    res.status(500).send(error);
  }
});
